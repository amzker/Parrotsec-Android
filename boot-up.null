#!/bin/sh
#DONT BE IDIOT PLEAS | ROOT POWER NEED 
if [ -x /system/xbin/busybox ]; then
   busybox=/system/xbin/busybox
elif [ -x /data/local/bin/busybox ]; then
      busybox=/data/local/bin/busybox
elif [ -x /system/bin/busybox ]; then
   busybox=/system/bin/busybox
else
   echo "Busybox not found!  Install it, dummy!";
   log "Busybox not found!  Install it, dummy!";
   exit;
fi

su 0 setenforce 0

#########  CHECK FOR ROOT #########
f_checkforroot(){
perm=$(id|$busybox cut -b 5)
if [ "$perm" != "0" ];then echo "ROOT NOT DETECTED! Type: su or install SuperSU to fix"; exit; fi
}

#########  EXPORT #########
export bin=/system/bin
export mnt=/data/local/ParrotSec/parrot-armhf
PRESERVED_PATH=$PATH
export PATH=/usr/bin:/usr/sbin:/bin:/usr/local/bin:/usr/local/sbin:$PATH
export TERM=linux
export HOME=/root
export USER=root
export LOGNAME=root
unset LD_PRELOAD

######### SET DNS ########

rm -f /data/local/ParrotSec/parrot-armhf/etc/resolv.conf # remove dns entries
touch /data/local/ParrotSec/parrot-armhf/etc/resolv.conf # create empty resolv.conf

for i in 1 2 3 4; do
   if [[  -z $(getprop net.dns${i}) ]]; then
      # we go through 1-4 dns servers and break out of loop on empty
      break
   else
      # add local/device dns server first
      echo "nameserver $(getprop net.dns${i})" >> /data/local/ParrotSec/parrot-armhf/etc/resolv.conf
   fi
done

# lastly add two default dns entries
echo "nameserver 208.67.222.222" >> /data/local/ParrotSec/parrot-armhf/etc/resolv.conf
echo "nameserver 208.67.220.220" >> /data/local/ParrotSec/parrot-armhf/etc/resolv.conf

#########  MOUNT #########

## Should run always (https://su.chainfire.eu/#how-mount)
$busybox mount -o remount,suid /data

if [ "$($busybox mountpoint $mnt/dev)" == "$mnt/dev is a mountpoint" ]; then
	# Files exist in /dev so we can assume its mounted and we have root
	clear
else
	f_checkforroot


	$busybox mount -r -o bind /system $mnt/system

	if [ -d "/storage/emulated/0" ]; then
        $busybox mount -o bind /storage/emulated/0 $mnt/sdcard
	elif [ -d "/storage/emulated/legacy"]; then
        $busybox mount -o bind /storage/emulated/legacy $mnt/sdcard
    else
        $busybox mount -o bind /sdcard $mnt/sdcard
	fi

	$busybox mount -o bind /storage/usbdisk $mnt/mnt/usbdisk
	$busybox mount -o bind /dev $mnt/dev
	$busybox mount -t devpts devpts $mnt/dev/pts
	$busybox mount -t proc proc $mnt/proc
	$busybox mount -t sysfs sysfs $mnt/sys

	$busybox chmod 666 /dev/null

	# SET 250MB TO ALLOW POSTGRESQL #
	$busybox sysctl -w kernel.shmmax=268435456

	# NETWORK SETTINGS #
	$busybox sysctl -w net.ipv4.ip_forward=1
	echo "127.0.0.1       localhost Parrot" > $mnt/etc/hosts
	echo "::1             localhost ip6-localhost ip6-loopback" >> $mnt/etc/hosts
	echo "Amzker-Parrot" > $mnt/proc/sys/kernel/hostname

	clear
fi

# EXECUTE CHROOT / ADD ARGUMENTS TO LAUNCH SPECIFIC PROGRAMS
#
# ---------------  START / STOP ARGUMENTS  ----------------- #
# apache, beef-xss, dhcp, dnsmasq, hid-cmd, openvpn, ssh,
# mana {stop}, mana-full, mana-noup, mana-noupeap, mana-simple,
# mana-bdf, msf, fruitywifi
# ---------------  SINGLE ARGUMENT ------------------------- #
# hid-cmd, hid-cmd-elevated-win[7-8], wifite, iptables, update
# start-rev-met, start-rev-met-elevated-win[8-7]

    if [ $# -eq 0 ]; then
        $busybox chroot $mnt /bin/bash -i
    else

   	#APACHE

   	if [ "$1" == "apache" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt sudo service apache2 start
   	fi
   	if [ "$1" == "apache" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt sudo service apache2 stop
   	fi

   	#BEEF-XSS

   	if [ "$1" == "beef-xss" ] && [ "$2" == "start" ]; then
        LANG=en_US.UTF-8 LANGUAGE=en_US.UTF-8 LC_ALL=en_US.UTF-8 $busybox chroot $mnt sudo service beef-xss start
   		sleep 35
   		am start -a android.intent.action.VIEW -d http://127.0.0.1:3000/ui/panel
   	fi
   	if [ "$1" == "beef-xss" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt sudo service beef-xss stop
   	fi

   	#DHCP

   	if [ "$1" == "dhcp" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt sudo service isc-dhcp-server start
   	fi
   	if [ "$1" == "dhcp" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt sudo service isc-dhcp-server stop
   	fi

   	#DNSMASQ

   	if [ "$1" == "dnsmasq" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt service dnsmasq start
   	fi
   	if [ "$1" == "dnsmasq" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt service dnsmasq stop
   	fi

   	#HOSTAPD

   	if [ "$1" == "hostapd" ] && [ "$2" == "start" ]; then
# 		$busybox chroot $mnt /usr/sbin/hostapd /etc/hostapd/hostapd.conf >/dev/null 2>&1 </dev/null &
   		$busybox chroot $mnt service hostapd start

   	fi
   	if [ "$1" == "hostapd" ] && [ "$2" == "stop" ]; then
#   		killall hostapd 2> /dev/null
   		$busybox chroot $mnt service hostapd stop
   	fi

   	#IPTABLES

   	if [ "$1" == "iptables" ]; then
   		$busybox chroot $mnt sh /sdcard/nh_files/iptables.conf
   	fi

   	#MANA (is now using only the stop scripts)

   	if [ "$1" == "mana-lollipop" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt /usr/bin/stop-mana-lollipop
   	fi

   	if [ "$1" == "mana-kitkat" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt /usr/bin/stop-mana-kitkat
   	fi


   	#MSF

   	if [ "$1" == "msf" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt service postgresql start
         $busybox chroot $mnt service metasploit start
   	fi
   	if [ "$1" == "msf" ] && [ "$2" == "stop" ]; then
         $busybox chroot $mnt service postgresql start
   		$busybox chroot $mnt service metasploit stop
   	fi


   	#OPENVPN

   	if [ "$1" == "openvpn" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt service openvpn start
   	fi
   	if [ "$1" == "openvpn" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt service openvpn stop
   	fi

   	# HID Keyboard Command a.k.a Teensy style
      # Supported keyboard layouts: US, FR, EN, ES
      # We can pass language options to bootparrot like:
      # bootparrot start-rev-met --us | --fr | --de | --es

   	if [ "$1" == "start-rev-met" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh start-rev-met "$2" |/system/bin/sh
   	fi
   	if [ "$1" == "start-rev-met-elevated-win7" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh start-rev-met-elevated-win7 $2 |/system/bin/sh
   	fi
   	if [ "$1" == "start-rev-met-elevated-win8" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh start-rev-met-elevated-win8 $2 |/system/bin/sh
   	fi
	if [ "$1" == "start-rev-met-elevated-win10" ]; then
		 $busybox chroot $mnt sudo /usr/bin/hid-all.sh start-rev-met-elevated-win10 $2 |/system/bin/sh
	fi

      if [ "$1" == "hid-cmd-elevated-win10" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh hid-cmd-elevated-win10 "$2" |/system/bin/sh
      fi
      if [ "$1" == "hid-cmd-elevated-win8" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh hid-cmd-elevated-win8 "$2" |/system/bin/sh
      fi
      if [ "$1" == "hid-cmd-elevated-win7" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh hid-cmd-elevated-win7 "$2" |/system/bin/sh
      fi
      if [ "$1" == "hid-cmd" ]; then
         $busybox chroot $mnt sudo /usr/bin/hid-all.sh hid-cmd "$2" |/system/bin/sh
      fi


      # DUCK HUNT - Rubber Ducky conversion script to AmzyParrot
      # Requires argument to generate based on language. e.g.:
      # bootparrot duck-hunt-convert us /sdcard/nh_files/modules/ducktest.txt /opt/duckout.sh
      # Languages supported: us, fr, de, es,sv, it, uk, ru, dk, no, pt, be
      #
      # Run converted script with:
      # bootparrot duck-hunt-run {/opt/duckout.sh}

      if [ "$1" == "duck-hunt-convert" ]; then
         $busybox chroot $mnt sudo python /sdcard/nh_files/modules/duckhunter.py -l $2 $3 $4
         $busybox chroot $mnt sudo chmod 755 $4
      fi
      if [ "$1" == "duck-hunt-run" ]; then
         if [ ! -f /data/local/ParrotSec/parrot-armhf$2 ]; then
            echo "File not found"
         else
            echo "File /data/local/ParrotSec/parrot-armhf$2 found"
            $busybox chroot $mnt /bin/bash $2
         fi
      fi

   	#SSH

   	if [ "$1" == "ssh" ] && [ "$2" == "start" ]; then
   		$busybox chroot $mnt sudo service ssh start
   	fi
   	if [ "$1" == "ssh" ] && [ "$2" == "stop" ]; then
   		$busybox chroot $mnt sudo service ssh stop
   	fi

   	#UPDATE

   	if [ "$1" == "update" ]; then
   		LANG=C PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt sudo /usr/bin/start-update.sh
   	fi

   	#Disable WLAN1

   	if [ "$1" == "wifi-disable" ]; then
   		LANG=C PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt sudo /usr/bin/stop-wlan1.sh
   	fi


   	#WIFITE

      if [ "$1" == "wifite" ]; then
         $busybox chroot $mnt sudo /bin/bash -c "chmod 777 /dev/null"
         ifconfig wlan1 up
         sleep 3
         LANG=C PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt sudo /usr/bin/python /usr/bin/wifite
   	fi

      #FRUITYWIFI

      if [ "$1" == "fruitywifi" ] && [ "$2" == "start" ]; then
         $busybox chroot $mnt /etc/init.d/php5-fpm start
         $busybox chroot $mnt /etc/init.d/fruitywifi start
      fi
      if [ "$1" == "fruitywifi" ] && [ "$2" == "stop" ]; then
         $busybox chroot $mnt /etc/init.d/fruitywifi stop
         $busybox chroot $mnt /etc/init.d/php5-fpm stop
      fi

      #MACCHANGER
      # Usage: boot-up macchanger <mac address> <interface>
      #
      # Usage: boot-up macchanger random <interface>

      if [ "$1" == "macchanger_random" ]; then
         $busybox chroot $mnt sudo /usr/bin/macchanger --random $2
      fi

      if [ "$1" == "macchanger_custom" ]; then
         $busybox chroot $mnt sudo /usr/bin/macchanger --mac=$2 $3
      fi
      if [ "$1" == "macchanger_original" ]; then
         $busybox chroot $mnt sudo /usr/bin/macchanger --permanent $2
      fi
      #KALIMENU

      if [ "$1" == "Parrotmenu" ]; then
         $busybox chroot $mnt sudo /usr/bin/parrotmenu
      fi

		#YCABLE ¯\_(ಠ_ಠ)_/¯

		if [ "$1" == "ycable" ] && [ "$2" == "start" ]; then
			if [ -f "/sys/module/msm_otg/parameters/usbhost_charge_mode" ]; then
				echo "1" > /sys/module/msm_otg/parameters/usbhost_charge_mode
			fi
			if [ -f "/sys/module/tegra_otg/parameters/tegra_otg_on_charging" ]; then
				echo "Y" > /sys/module/tegra_otg/parameters/tegra_otg_on_charging
			fi
			if [ -f "/sys/module/dwc3/parameters/aca_enable" ]; then
            	echo "Y" > /sys/module/dwc3/parameters/aca_enable
            fi
		fi

		if [ "$1" == "ycable" ] && [ "$2" == "stop" ]; then
			if [ -f "/sys/module/msm_otg/parameters/usbhost_charge_mode" ]; then
				echo "0" > /sys/module/msm_otg/parameters/usbhost_charge_mode
			fi
			if [ -f "/sys/module/tegra_otg/parameters/tegra_otg_on_charging" ]; then
				echo "N" > /sys/module/tegra_otg/parameters/tegra_otg_on_charging
			fi
			if [ -f "/sys/module/dwc3/parameters/aca_enable" ]; then
            	echo "N" > /sys/module/dwc3/parameters/aca_enable
            fi
		fi

		#CUSTOM BUTTONS
		if [ "$1" == "custom_cmd" ]; then
			commmand=""
			LANG=C PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
			while test $# -gt 0
			do
				shift
				commmand=${commmand}" "$1
			done
			$busybox chroot $mnt sudo $commmand
		fi

		#MFOC MIFARE DUMP

        if [ "$1" == "dumpmifare" ]; then
			$busybox chroot $mnt /usr/bin/dumpmifare.sh
        fi

      #APT-GET
      #Example: bootup apt-get install "package-name package2"
      #Packages don't have to be in quotes but it doesn't hurt
      #Also, you can leave the packages blank and it'll just update/upgrade

      if [ "$1" == "apt-get" ] && [ "$2" == "install" ]; then
            echo -e "\e[32mHere we go!\n\nInstalling any new metapackages and update/upgrading.\n\nNote that you may be asked to interact during the installation of some packages.\n\n"
            echo -e "Parrot-chroot$ /usr/bin/apt-get update\e[0m"
            LANG=C PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt /usr/bin/apt-get update
         if [ -z ${var+x} ] || [ "$3" != "" ]; then
            echo -e "\e[32mParrot-chroot$ /usr/bin/apt-get -y install "$3"\e[0m"
            LANG=C DEBIAN_FRONTEND=noninteractive PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt /usr/bin/apt-get -y install "$3"
         fi
            echo -e "\e[32mParrot-chroot$ /usr/bin/apt-get -y dist-upgrade\e[0m"
            LANG=C DEBIAN_FRONTEND=noninteractive PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt /usr/bin/apt-get -y dist-upgrade
            LANG=C DEBIAN_FRONTEND=noninteractive PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt /usr/bin/apt-get -y install "$3"
            echo -e "\e[32mParrot-chroot$ /usr/bin/apt-get -y dist-upgrade\e[0m"
            LANG=C DEBIAN_FRONTEND=noninteractive PATH=$PATH:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin $busybox chroot $mnt /usr/bin/apt-get -y dist-upgrade
            echo -e "\e[32m"
            printf "\n\nDone!\n\nPress the 'back' key to return to AmzyParrot.\n\nIf you noticed errors, press the up-arrow key (if your keyboard supports it) to review previously-issued commands.\n"
            printf "And remember to use the 'Maintain Chroot' button in the Chroot Manager to keep your chroot up-to-date and to install new metapackages.\n\n"
            echo -e "\e[0m"
      fi
fi
